import org.junit.jupiter.api.*;
import java.awt.*;

import static java.lang.Double.parseDouble;
import static org.junit.jupiter.api.Assertions.*;

public class PenTest {

    Color testColor;
    String in = "PEN #FF0000";

    Pen newPen = null;


    @Test
    public void PenSameColourTest(){
        try{
            newPen = new Pen(in);
        }catch (ShapeException z){

        }

        String trueTestInput = "PEN #FF0000";
        String s[] = trueTestInput.split(" #");
        int rr = Integer.parseInt(s[1].substring(0,2), 16);
        int gg = Integer.parseInt(s[1].substring(2,4), 16);
        int bb = Integer.parseInt(s[1].substring(4,6), 16);
        testColor = new Color(rr, gg, bb);

        assertEquals(newPen.color, testColor);
    }

    @Test
    public void PenDifferentColourTest(){
        try{
            newPen = new Pen(in);
        }catch (ShapeException z){

        }

        String trueTestInput = "PEN #CC0000";
        String s[] = trueTestInput.split(" #");
        int rr = Integer.parseInt(s[1].substring(0,2), 16);
        int gg = Integer.parseInt(s[1].substring(2,4), 16);
        int bb = Integer.parseInt(s[1].substring(4,6), 16);
        testColor = new Color(rr, gg, bb);

        assertNotEquals(newPen.color, testColor);
    }

    @Test
    public void toStringTest(){
        try{
            newPen = new Pen(in);
        }catch (ShapeException z){

        }
        assertEquals(newPen.toString(), in);
    }

    @Test
    public void noHashExceptionTest(){
        String inTest = "PEN FF0000";
        ShapeException penThrown1 = assertThrows(ShapeException.class, () ->{
           Pen penTest = new Pen(inTest);
           throw new ShapeException("No '#' found in Pen command.");
        });
        assertEquals("No '#' found in Pen command.", penThrown1.getMessage());
    }

    // maybe take a look at how this unit test functions
    @Test
    public void invalidColourExpressionExceptionTest(){
        String inTest = "PEN #FF000000";
        ShapeException penThrown2 = assertThrows(ShapeException.class, () ->{
            Pen penTest = new Pen(inTest);
            throw new ShapeException("Invalid colour command - Too many characters.");
        });
        assertEquals("Invalid colour command - Too many characters.", penThrown2.getMessage());
    }
}
